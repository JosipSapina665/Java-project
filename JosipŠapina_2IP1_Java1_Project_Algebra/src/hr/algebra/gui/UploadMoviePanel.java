/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.gui;

import hr.algebra.dal.ActorRepository;
import hr.algebra.dal.ActorRepositoryImpl;
import hr.algebra.dal.DirectorRepository;
import hr.algebra.dal.DirectorRepositoryImpl;
import hr.algebra.dal.MovieActorRepository;
import hr.algebra.dal.MovieActorRepositoryImpl;
import hr.algebra.dal.MovieDirectorRepository;
import hr.algebra.dal.MovieDirectorRepositoryImpl;
import hr.algebra.dal.MovieRepository;
import hr.algebra.dal.MovieRepositoryImpl;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.parser.rss.MovieParser;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.utils.MessageUtils;
import java.util.ArrayList;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 *
 * @author josip
 */
public class UploadMoviePanel extends javax.swing.JPanel {

    private DefaultListModel<Movie> moviesModel;
    private MovieRepository movieRepository;
    private ActorRepository actorRepository;
    private DirectorRepository directorRepository;
    private MovieDirectorRepository movieDirectorRepository;
    private MovieActorRepository movieActorRepository;
    private List<Movie> movieList;

    /**
     * Creates new form UploadMoviePanel
     */
    public UploadMoviePanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsMovies = new javax.swing.JList<>();
        btnParse = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();

        jScrollPane1.setViewportView(lsMovies);

        btnParse.setText("Parse");
        btnParse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParseActionPerformed(evt);
            }
        });

        btnUpload.setText("Upload movies");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1166, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnParse, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnParse, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnParseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParseActionPerformed
        new Thread(() -> {
            try {
                parseMovies();
            } catch (Exception ex) {
                Logger.getLogger(UploadMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }//GEN-LAST:event_btnParseActionPerformed

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        try {
            loadMovies();
        } catch (Exception ex) {
            Logger.getLogger(UploadMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUploadActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnParse;
    private javax.swing.JButton btnUpload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Movie> lsMovies;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            movieRepository = RepositoryFactory.getRepoFactory(MovieRepositoryImpl.class);
            actorRepository = RepositoryFactory.getRepoFactory(ActorRepositoryImpl.class);
            directorRepository = RepositoryFactory.getRepoFactory(DirectorRepositoryImpl.class);
            movieActorRepository = RepositoryFactory.getRepoFactory(MovieActorRepositoryImpl.class);
            movieDirectorRepository = RepositoryFactory.getRepoFactory(MovieDirectorRepositoryImpl.class);

            moviesModel = new DefaultListModel<>();
            loadMovies();

        } catch (Exception ex) {
            Logger.getLogger(UploadMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void parseMovies() {
        try {
            List<Movie> movies = new ArrayList<>(MovieParser.parse());
            loadMovies();

            movies.forEach(movie -> {
                try {
                    if (!movieRepository.getMany().contains(movie)) {
                        Integer id = movieRepository.save(movie).get();

                        if (!movie.getActors().isEmpty()) {
                            List<Optional<Integer>> actorId = saveA(movie.getActors());
                            actorToMovie(id, actorId);
                        }

                        if (!movie.getDirectors().isEmpty()) {
                            List<Optional<Integer>> directorId = saveD(movie.getDirectors());
                            directorToMovie(id, directorId);
                        }
                    }

                } catch (Exception ex) {
                    Logger.getLogger(UploadMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
            MessageUtils.showInformationMessage("Success", "Parsed!");
        } catch (Exception ex) {
            Logger.getLogger(UploadMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void loadMovies() throws Exception {

        try {
            movieList = movieRepository.getMany();
            moviesModel.clear();
            movieList.forEach(moviesModel::addElement);
            lsMovies.setModel(moviesModel);
        } catch (Exception ex) {
            Logger.getLogger(UploadMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private List<Optional<Integer>> saveA(List<Actor> actors) {
        return actors
                .stream()
                .map(actorRepository::save)
                .collect(Collectors.toList());
    }

    private void actorToMovie(Integer id, List<Optional<Integer>> actorId) {
        actorId.forEach(actor -> {
            if (actor.isPresent()) {
                try {
                    movieActorRepository.saveMovieActor(id, actor.get());
                } catch (Exception ex) {
                    Logger.getLogger(UploadMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private List<Optional<Integer>> saveD(List<Director> directors) {
        return directors
                .stream()
                .map(directorRepository::save)
                .collect(Collectors.toList());
    }

    private void directorToMovie(Integer id, List<Optional<Integer>> directorId) {
        directorId.forEach(director -> {
            if (director.isPresent()) {
                try {
                    movieDirectorRepository.saveMovieDirector(id, director.get());
                } catch (Exception ex) {
                    Logger.getLogger(UploadMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
}

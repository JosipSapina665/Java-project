/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.gui;

import hr.algebra.dal.ActorRepository;
import hr.algebra.dal.ActorRepositoryImpl;
import hr.algebra.dal.DeleteAllRepository;
import hr.algebra.dal.DeleteAllRepositoryImpl;
import hr.algebra.dal.DirectorRepository;
import hr.algebra.dal.DirectorRepositoryImpl;
import hr.algebra.dal.MovieActorRepository;
import hr.algebra.dal.MovieActorRepositoryImpl;
import hr.algebra.dal.MovieDirectorRepository;
import hr.algebra.dal.MovieDirectorRepositoryImpl;
import hr.algebra.dal.MovieRepository;
import hr.algebra.dal.MovieRepositoryImpl;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieArchive;
import hr.algebra.model.MovieTableModel;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.JAXBUtils;
import hr.algebra.utils.MessageUtils;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;
import javax.xml.bind.JAXBException;

/**
 *
 * @author josip
 */
public class AdminPanel extends javax.swing.JPanel {

    private static final String DIR = "assets";
    private static final String FILENAME = "moviearchive.xml";

    private MovieRepository movieRepository;
    private MovieActorRepository movieActorRepository;
    private MovieDirectorRepository movieDirectorRepository;
    private DirectorRepository directorRepository;
    private DeleteAllRepository deleteAllRepository;

    private MovieTableModel movieTableModel;
    private ActorRepository actorRepository;
    private DefaultListModel<Actor> actorModel = new DefaultListModel<>();
    private DefaultListModel<Director> directorModel = new DefaultListModel<>();

    private Movie selectedMovie;
    private List<Movie> movies;
    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    /**
     * Creates new form AdminPanel
     */
    public AdminPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfGenre = new javax.swing.JTextField();
        tfPubDate = new javax.swing.JTextField();
        tfDuration = new javax.swing.JTextField();
        tfTitle = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        lbImage = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        tfImagePath = new javax.swing.JTextField();
        lbGenreError = new javax.swing.JLabel();
        lbTitleError = new javax.swing.JLabel();
        lbPubDateError = new javax.swing.JLabel();
        lbDurationError = new javax.swing.JLabel();
        lbDescriptionError = new javax.swing.JLabel();
        lbActorError = new javax.swing.JLabel();
        lbDirectorError = new javax.swing.JLabel();
        lbIconError = new javax.swing.JLabel();
        lbIconPathError = new javax.swing.JLabel();
        btnChooseImage = new javax.swing.JButton();
        btnDeleteOne = new javax.swing.JButton();
        btnDeleteAll = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        tfAddActor = new javax.swing.JTextField();
        tfAddDirector = new javax.swing.JTextField();
        btnDeleteActor = new javax.swing.JButton();
        btnAddActor = new javax.swing.JButton();
        btnDeleteDirector = new javax.swing.JButton();
        btnAddDirector = new javax.swing.JButton();
        btnXml = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Publish date:");

        jLabel2.setText("Title;");

        jLabel3.setText("Genre:");

        jLabel4.setText("Description:");

        jLabel5.setText("Duration:");

        tfPubDate.setName("DATE"); // NOI18N

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane1.setViewportView(taDescription);

        jLabel6.setText("Directors:");

        jLabel7.setText("Actors:");

        jScrollPane2.setViewportView(lsDirectors);

        lsActors.setValueIsAdjusting(true);
        jScrollPane3.setViewportView(lsActors);

        lbImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/algebra/gui/image.jpeg"))); // NOI18N

        jLabel8.setText("Icon:");

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbMoviesKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(tbMovies);

        lbGenreError.setForeground(java.awt.Color.red);

        lbTitleError.setForeground(java.awt.Color.red);

        lbPubDateError.setForeground(java.awt.Color.red);

        lbDurationError.setForeground(java.awt.Color.red);

        lbDescriptionError.setForeground(java.awt.Color.red);

        lbActorError.setForeground(java.awt.Color.red);

        lbDirectorError.setForeground(java.awt.Color.red);

        lbIconError.setForeground(java.awt.Color.red);

        lbIconPathError.setForeground(java.awt.Color.red);

        btnChooseImage.setText("Choose");
        btnChooseImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseImageActionPerformed(evt);
            }
        });

        btnDeleteOne.setText("Delete");
        btnDeleteOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOneActionPerformed(evt);
            }
        });

        btnDeleteAll.setText("Delete all");
        btnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDeleteActor.setText("Delete");
        btnDeleteActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActorActionPerformed(evt);
            }
        });

        btnAddActor.setText("Add");
        btnAddActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActorActionPerformed(evt);
            }
        });

        btnDeleteDirector.setText("Delete");
        btnDeleteDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDirectorActionPerformed(evt);
            }
        });

        btnAddDirector.setText("Add");
        btnAddDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDirectorActionPerformed(evt);
            }
        });

        btnXml.setText("XML");
        btnXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXmlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(41, 41, 41)
                        .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbPubDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(92, 92, 92)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lbActorError, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfAddActor, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnAddActor, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnDeleteActor)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(142, 142, 142)
                                                .addComponent(lbDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(btnAddDirector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(btnDeleteDirector))
                                                    .addComponent(tfAddDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(btnDeleteAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(14, 14, 14)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(23, 23, 23)
                                    .addComponent(btnDeleteOne, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(tfImagePath)
                                        .addComponent(lbImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 223, Short.MAX_VALUE)
                                        .addComponent(btnChooseImage, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(btnXml, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbIconError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(lbIconPathError, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(812, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(lbIconError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(1, 1, 1)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbActorError, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lbDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(3, 3, 3)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(124, 124, 124))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnXml, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lbImage, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(tfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(lbIconPathError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChooseImage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbTitleError))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbGenreError))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPubDateError))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDurationError))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(lbDescriptionError)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfAddActor, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfAddDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnDeleteDirector)
                                        .addComponent(btnAddDirector)
                                        .addComponent(btnDeleteActor))
                                    .addComponent(btnAddActor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(btnDeleteOne, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(50, 50, 50))
                                    .addComponent(btnDeleteAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)))))
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseImageActionPerformed
        File file = FileUtils.uploadFile("Images", "png", "jpg", "jpeg");
        if (file == null) {
            return;
        }

        tfImagePath.setText(file.getAbsolutePath());
        setIcon(lbImage, file);
    }//GEN-LAST:event_btnChooseImageActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void tbMoviesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyPressed
        showMovie();
    }//GEN-LAST:event_tbMoviesKeyPressed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (formValid()) {
            try {
                String path = uploadPicture();

                Movie movie = new Movie(
                        tfTitle.getText().trim(),
                        taDescription.getText().trim(),
                        Integer.parseInt(tfDuration.getText().trim()),
                        tfGenre.getText().trim(),
                        path,
                        LocalDateTime.parse(tfPubDate.getText().trim(), Movie.DATE_FORMAT)
                );

                movieRepository.save(movie);
                movieTableModel.setMovies(movieRepository.getMany());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        if (formValid()) {
            try {
                String path = uploadPicture();
                Movie movie = new Movie();
                int idMovie = select();
                if (movie == null) {
                    MessageUtils.showInformationMessage("Wrong", "Please choose an movie!");
                    return;
                }
                movie.setId(idMovie);

                movie.setTitle(tfTitle.getText().trim());
                movie.setGenre(tfGenre.getText().trim());
                movie.setDuration(Integer.parseInt(tfDuration.getText().trim()));
                movie.setPubDate(LocalDateTime.parse(tfPubDate.getText().trim(), Movie.DATE_FORMAT));
                movie.setDescription(taDescription.getText().trim());
                movie.setImagePath(path);
                movieRepository.update(movie.getId(), movie);
                movieTableModel.setMovies(movieRepository.getMany());
            } catch (Exception ex) {
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOneActionPerformed
        if (formValid()) {
            Movie movie = new Movie();
            int idMovie = select();
            if (movie == null) {
                MessageUtils.showInformationMessage("Wrong", "Please choose an movie!");
                return;
            }
            movie.setId(idMovie);

            if (MessageUtils.showConfirmDialog("Delete", "Really!") == JOptionPane.YES_OPTION) {
                try {
                    if (movie.getImagePath() != null) {
                        Files.delete(Paths.get(movie.getImagePath()));
                    }

                    movieRepository.delete(movie.getId());
                    movieTableModel.setMovies(movieRepository.getMany());
                    lsActors.setModel(actorModel);
                    lsDirectors.setModel(directorModel);
                    clearForm();
                } catch (Exception ex) {
                    Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnDeleteOneActionPerformed

    private void btnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllActionPerformed
        if (MessageUtils.showConfirmDialog("Delete", "All data will be lost!!!") == JOptionPane.YES_OPTION) {
            try {
                FileUtils.deleteAll(new File(DIR));
                deleteAllRepository.deleteAll();
                movieTableModel.setMovies(movieRepository.getMany());
                clearForm();
            } catch (SQLException ex) {
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeleteAllActionPerformed

    private void btnAddActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActorActionPerformed
        try {
            Actor actor = new Actor(tfAddActor.getText());

            int idActor = actorRepository.save(actor).get();
            saveMovieActors(idActor);
            showMovie();
            tfAddActor.setText("");
        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddActorActionPerformed

    private void btnDeleteActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActorActionPerformed
        try {
            Actor actor = lsActors.getSelectedValue();
            actorRepository.delete(actor.getId());
            showMovie();
            tfAddActor.setText("");
        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to find Actor");
        }
    }//GEN-LAST:event_btnDeleteActorActionPerformed

    private void btnAddDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDirectorActionPerformed
        try {
            Director director = new Director(tfAddDirector.getText());
            int idDirector = directorRepository.save(director).get();
            saveMovieDirectors(idDirector);
            showMovie();
            tfAddDirector.setText("");
        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAddDirectorActionPerformed

    private void btnDeleteDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDirectorActionPerformed
        try {
            Director director = lsDirectors.getSelectedValue();

            directorRepository.delete(director.getId());
            showMovie();
        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to find Actor");
        }
    }//GEN-LAST:event_btnDeleteDirectorActionPerformed

    private void btnXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXmlActionPerformed
        new Thread(() -> {
            try {
                movies = movieRepository.getMany();

                JAXBUtils.save(new MovieArchive(this.movies), FILENAME);
                MessageUtils.showInformationMessage("Info", "Saved!!");
            } catch (JAXBException ex) {
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }//GEN-LAST:event_btnXmlActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddActor;
    private javax.swing.JButton btnAddDirector;
    private javax.swing.JButton btnChooseImage;
    private javax.swing.JButton btnDeleteActor;
    private javax.swing.JButton btnDeleteAll;
    private javax.swing.JButton btnDeleteDirector;
    private javax.swing.JButton btnDeleteOne;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnXml;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lbActorError;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbDirectorError;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbGenreError;
    private javax.swing.JLabel lbIconError;
    private javax.swing.JLabel lbIconPathError;
    private javax.swing.JLabel lbImage;
    private javax.swing.JLabel lbPubDateError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JList<Actor> lsActors;
    private javax.swing.JList<Director> lsDirectors;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfAddActor;
    private javax.swing.JTextField tfAddDirector;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfGenre;
    private javax.swing.JTextField tfImagePath;
    private javax.swing.JTextField tfPubDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            initRepo();
            initTable();
        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load form!");
            System.exit(1);
        }
    }

    private void initValidation() throws Exception {
        validationFields = Arrays.asList(tfTitle, tfGenre, tfPubDate, tfDuration, taDescription, tfImagePath);
        errorLabels = Arrays.asList(lbTitleError, lbGenreError, lbPubDateError, lbDurationError,
                lbDescriptionError, lbIconPathError, lbIconError);
    }

    private void initRepo() throws Exception {

        movieRepository = RepositoryFactory.getRepoFactory(MovieRepositoryImpl.class);
        actorRepository = RepositoryFactory.getRepoFactory(ActorRepositoryImpl.class);
        directorRepository = RepositoryFactory.getRepoFactory(DirectorRepositoryImpl.class);
        movieActorRepository = RepositoryFactory.getRepoFactory(MovieActorRepositoryImpl.class);
        movieDirectorRepository = RepositoryFactory.getRepoFactory(MovieDirectorRepositoryImpl.class);
        deleteAllRepository = RepositoryFactory.getRepoFactory(DeleteAllRepositoryImpl.class);

    }

    private void initTable() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        movieTableModel = new MovieTableModel(movieRepository.getMany());
        tbMovies.setModel(movieTableModel);
    }

    private void setIcon(JLabel lable, File file) {
        try {
            lable.setIcon(IconUtils.createIcon(file, lable.getWidth(), lable.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to upload file!");
        }
    }

    private boolean formValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");
            if (lbActorError.getText().isEmpty()) {
                lbActorError.setText("X");
            } else {
                lbActorError.setText("");
            }

            if (lbDirectorError.getText().isEmpty()) {
                lbDirectorError.setText("X");
            } else {
                lbDirectorError.setText("");
            }

            if (lbIconError.getText() == null) {
                lbIconError.setText("X");
            }

            if ("DATE".equals(validationFields.get(i).getText())) {
                try {
                    LocalDateTime.parse(validationFields.get(i).getText(), Movie.DATE_FORMAT);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                }
            }
        }
        return ok;
    }

    private void showMovie() {
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int id = (int) movieTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> optMovie = movieRepository.getOne(id);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillAll(selectedMovie);
            }
        } catch (Exception ex) {
            Logger.getLogger(EditUserPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to fetch movie!");
        }
    }

    private void fillAll(Movie movie) throws Exception {
        clearForm();
        tfTitle.setText(movie.getTitle());
        tfGenre.setText(movie.getGenre());
        tfDuration.setText(String.valueOf(movie.getDuration()));
        tfPubDate.setText(movie.getPubDate().format(Movie.DATE_FORMAT));
        tfImagePath.setText(movie.getImagePath());
        taDescription.setText(movie.getDescription());
        setActors(movie.getId());
        setDirectors(movie.getId());

        if (movie.getImagePath() != null && Files.exists(Paths.get(movie.getImagePath()))) {
            setIcon(lbImage, new File(movie.getImagePath()));
        }
    }

    private void setActors(int id) {
        if (id != 0) {
            try {
                actorModel.clear();
                movieActorRepository.getMovieActors(id).forEach(actorModel::addElement);
                lsActors.setModel(actorModel);

            } catch (Exception ex) {
                Logger.getLogger(EditUserPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void setDirectors(int id) {
        if (id != 0) {
            try {
                directorModel.clear();
                movieDirectorRepository.getMovieDirectors(id).forEach(directorModel::addElement);
                lsDirectors.setModel(directorModel);
            } catch (Exception ex) {
                Logger.getLogger(EditUserPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private String uploadPicture() throws IOException {
        String ext = tfImagePath.getText().trim().substring(tfImagePath.getText().trim().lastIndexOf("."));

        String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = DIR + File.separator + pictureName;

        FileUtils.copy(tfImagePath.getText().trim(), localPicturePath);
        return localPicturePath;
    }

    private void clearForm() {
        validationFields.forEach(v -> v.setText(""));
        errorLabels.forEach(el -> el.setText(""));
        lbActorError.setText("");
        lbDirectorError.setText("");
        actorModel.clear();
        lsActors.setModel(actorModel);
        directorModel.clear();
        lsDirectors.setModel(directorModel);
        selectedMovie = null;
        clearImage();
    }

    private void clearImage() {
        lbImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/algebra/gui/image.jpeg")));
    }

    private int select() {
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int id2 = (int) movieTableModel.getValueAt(rowIndex, 0);

        return id2;
    }

    private void saveMovieActors(int id) throws Exception {
        int idMovie = select();
        movieActorRepository.saveMovieActor(idMovie, id);
    }

    private void saveMovieDirectors(int id) throws Exception {
        int idMovie = select();
        movieDirectorRepository.saveMovieDirector(idMovie, id);
    }

}

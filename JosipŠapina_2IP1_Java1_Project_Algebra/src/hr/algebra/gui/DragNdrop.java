/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.gui;

import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.dal.UserRepository;
import hr.algebra.dal.UserRepositoryImpl;
import hr.algebra.model.Role;
import hr.algebra.model.User;
import hr.algebra.model.transferable.UserTransferable;
import hr.algebra.utils.MessageUtils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;

/**
 *
 * @author josip
 */
public class DragNdrop extends javax.swing.JPanel {

    /**
     * Creates new form DragNdrop
     */
    private UserRepository userRepository;
    private List<User> users = new ArrayList<>();

    private DefaultListModel<User> userModel = new DefaultListModel<>();
    private DefaultListModel<User> adminModel = new DefaultListModel<>();

    public DragNdrop() {
        initComponents();
        initRepo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsUser = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsAdmin = new javax.swing.JList<>();
        btnRemovieUser = new javax.swing.JButton();
        btnRemovieAdmin = new javax.swing.JButton();

        jLabel1.setText("Users");

        jScrollPane1.setViewportView(lsUser);

        jLabel2.setText("Administrators");

        lsAdmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lsAdminMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(lsAdmin);

        btnRemovieUser.setText("Removie user");
        btnRemovieUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovieUserActionPerformed(evt);
            }
        });

        btnRemovieAdmin.setText("Removie admin");
        btnRemovieAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovieAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(108, 108, 108)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(btnRemovieUser, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(192, 192, 192)
                        .addComponent(btnRemovieAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(1331, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemovieUser, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemovieAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(198, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemovieUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovieUserActionPerformed
        try {
            User selectedRow = lsUser.getSelectedValue();
            userRepository.delete(selectedRow);
            loadAllUsers();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Please select user!");
        }
    }//GEN-LAST:event_btnRemovieUserActionPerformed

    private void btnRemovieAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovieAdminActionPerformed
        try {
            User selectedRow = lsAdmin.getSelectedValue();
            if (selectedRow.getUsername().equals("admin")) {
                MessageUtils.showErrorMessage("Error", "Unable to delete Admin!");
            } else {
                userRepository.delete(selectedRow);
                loadAllUsers();
            }
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Please select user!");

        }
    }//GEN-LAST:event_btnRemovieAdminActionPerformed

    private void lsAdminMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsAdminMouseReleased
//        fillForm();
    }//GEN-LAST:event_lsAdminMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRemovieAdmin;
    private javax.swing.JButton btnRemovieUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<User> lsAdmin;
    private javax.swing.JList<User> lsUser;
    // End of variables declaration//GEN-END:variables

    private void initRepo() {
        try {
            userRepository = RepositoryFactory.getRepoFactory(UserRepositoryImpl.class);
            init();
        } catch (Exception ex) {
            Logger.getLogger(DragNdrop.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void init() {
        try {
            loadAllUsers();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(DragNdrop.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadAllUsers() throws Exception {
        users = userRepository.getMany();
        userModel.clear();
        adminModel.clear();

        users.forEach(u -> {
            Role r = u.getRole().USER;

            if (u.getRole().equals(r)) {
                userModel.addElement(u);

            } else {
                adminModel.addElement(u);

            }
            lsUser.setModel(userModel);
            lsAdmin.setModel(adminModel);
        });

    }

    private void initDragNDrop() {
        lsUser.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsUser.setDragEnabled(true);
        lsUser.setTransferHandler(new ExportHandler());

        lsAdmin.setDropMode(DropMode.ON);
        lsAdmin.setTransferHandler(new ImportHandler());
    }

    private void fillForm() {
        lsUser.setModel(userModel);
        lsAdmin.setModel(userModel);
    }

    private class ExportHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new UserTransferable(lsUser.getSelectedValue());
        }

    }

    private class ImportHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(UserTransferable.USER_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            try {
                User data = (User) support.getTransferable().getTransferData(UserTransferable.USER_FLAVOR);
                if (users.add(data)) {
                    data.setRole(Role.USER);
                    userRepository.update(data);
                    loadAllUsers();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(DragNdrop.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(DragNdrop.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

    }
}
